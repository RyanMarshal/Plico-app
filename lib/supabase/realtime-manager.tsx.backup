'use client'

import React, { createContext, useContext, useEffect, useState, useCallback, useRef } from 'react'
import { RealtimeChannel, RealtimePostgresChangesPayload } from '@supabase/supabase-js'
import { getSupabaseSingleton } from './singleton-client'

interface RealtimeManagerState {
  isConnected: boolean
  connectionError: string | null
  retryCount: number
  lastError: Date | null
}

interface ChannelConfig {
  channelName: string
  table: string
  event?: 'INSERT' | 'UPDATE' | 'DELETE' | '*'
  filter?: string
  schema?: string
  onMessage: (payload: RealtimePostgresChangesPayload<any>) => void
  onError?: (error: Error) => void
  onConnect?: () => void
  onDisconnect?: () => void
}

interface RealtimeManagerContextType {
  state: RealtimeManagerState
  subscribe: (config: ChannelConfig) => () => void
  forceReconnect: () => void
}

const RealtimeManagerContext = createContext<RealtimeManagerContextType | null>(null)

const MAX_RETRY_ATTEMPTS = 5
const BASE_RETRY_DELAY = 1000 // 1 second
const MAX_RETRY_DELAY = 30000 // 30 seconds

export function RealtimeManagerProvider({ children }: { children: React.ReactNode }) {
  const [state, setState] = useState<RealtimeManagerState>({
    isConnected: false,
    connectionError: null,
    retryCount: 0,
    lastError: null,
  })

  const channelsRef = useRef<Map<string, { channel: RealtimeChannel; config: ChannelConfig }>>(new Map())
  const retryTimeoutRef = useRef<NodeJS.Timeout | null>(null)
  const supabase = getSupabaseSingleton()

  const calculateRetryDelay = (attempt: number): number => {
    // Exponential backoff with jitter
    const exponentialDelay = Math.min(BASE_RETRY_DELAY * Math.pow(2, attempt), MAX_RETRY_DELAY)
    const jitter = Math.random() * 0.3 * exponentialDelay // 30% jitter
    return exponentialDelay + jitter
  }

  const retryConnection = useCallback((config: ChannelConfig, attempt: number = 0) => {
    if (attempt >= MAX_RETRY_ATTEMPTS) {
      console.error('[RealtimeManager] Max retry attempts reached for channel:', config.channelName)
      setState(prev => ({
        ...prev,
        connectionError: `Failed to connect after ${MAX_RETRY_ATTEMPTS} attempts`,
        lastError: new Date(),
      }))
      config.onError?.(new Error('Max retry attempts reached'))
      return
    }

    const delay = calculateRetryDelay(attempt)
    console.log(`[RealtimeManager] Retrying connection for ${config.channelName} in ${delay}ms (attempt ${attempt + 1}/${MAX_RETRY_ATTEMPTS})`)

    retryTimeoutRef.current = setTimeout(() => {
      const existingEntry = channelsRef.current.get(config.channelName)
      if (existingEntry) {
        // Remove the old channel before creating a new one
        supabase.removeChannel(existingEntry.channel)
        channelsRef.current.delete(config.channelName)
      }

      // Create new subscription with the same config
      createSubscription(config, attempt + 1)
    }, delay)
  }, [])

  const createSubscription = useCallback((config: ChannelConfig, retryAttempt: number = 0) => {
    console.log('[RealtimeManager] Creating subscription:', config.channelName)

    const channel = supabase
      .channel(config.channelName)
      .on(
        'postgres_changes',
        {
          event: config.event || 'UPDATE',
          schema: config.schema || 'public',
          table: config.table,
          filter: config.filter,
        },
        (payload) => {
          console.log('[RealtimeManager] Message received on', config.channelName, payload)
          
          // Reset retry count on successful message
          if (state.retryCount > 0) {
            setState(prev => ({ ...prev, retryCount: 0, connectionError: null }))
          }
          
          config.onMessage(payload)
        }
      )
      .subscribe((status) => {
        console.log('[RealtimeManager] Channel status:', config.channelName, status)

        if (status === 'SUBSCRIBED') {
          setState(prev => ({ 
            ...prev, 
            isConnected: true, 
            connectionError: null,
            retryCount: 0 
          }))
          config.onConnect?.()
        } else if (status === 'CHANNEL_ERROR' || status === 'TIMED_OUT') {
          console.error('[RealtimeManager] Channel error:', config.channelName, status)
          setState(prev => ({ 
            ...prev, 
            isConnected: false,
            connectionError: `Channel ${status}`,
            retryCount: retryAttempt,
            lastError: new Date()
          }))
          config.onDisconnect?.()
          
          // Trigger retry
          retryConnection(config, retryAttempt)
        }
      })

    // Store channel reference
    channelsRef.current.set(config.channelName, { channel, config })

    return channel
  }, [state.retryCount, retryConnection])

  const subscribe = useCallback((config: ChannelConfig) => {
    // Check if channel already exists
    const existing = channelsRef.current.get(config.channelName)
    if (existing) {
      console.warn('[RealtimeManager] Channel already exists:', config.channelName)
      return () => {
        supabase.removeChannel(existing.channel)
        channelsRef.current.delete(config.channelName)
      }
    }

    // Create new subscription
    createSubscription(config)

    // Return cleanup function
    return () => {
      const entry = channelsRef.current.get(config.channelName)
      if (entry) {
        console.log('[RealtimeManager] Cleaning up channel:', config.channelName)
        supabase.removeChannel(entry.channel)
        channelsRef.current.delete(config.channelName)
      }
    }
  }, [createSubscription])

  const forceReconnect = useCallback(() => {
    console.log('[RealtimeManager] Force reconnecting all channels')
    
    // Clear any pending retries
    if (retryTimeoutRef.current) {
      clearTimeout(retryTimeoutRef.current)
    }

    // Reconnect all channels
    channelsRef.current.forEach(({ channel, config }) => {
      supabase.removeChannel(channel)
      createSubscription(config)
    })
  }, [createSubscription])

  // Cleanup on unmount
  useEffect(() => {
    return () => {
      if (retryTimeoutRef.current) {
        clearTimeout(retryTimeoutRef.current)
      }
      channelsRef.current.forEach(({ channel }) => {
        supabase.removeChannel(channel)
      })
      channelsRef.current.clear()
    }
  }, [])

  return (
    <RealtimeManagerContext.Provider value={{ state, subscribe, forceReconnect }}>
      {children}
    </RealtimeManagerContext.Provider>
  )
}

export function useRealtimeManager() {
  const context = useContext(RealtimeManagerContext)
  if (!context) {
    throw new Error('useRealtimeManager must be used within RealtimeManagerProvider')
  }
  return context
}

// Custom hook for easy subscription
export function useRealtimeSubscription(config: ChannelConfig | null) {
  const { subscribe } = useRealtimeManager()

  useEffect(() => {
    if (!config) return

    const unsubscribe = subscribe(config)
    return unsubscribe
  }, [config?.channelName]) // Only re-subscribe if channel name changes
}